{"version":3,"file":"svelte-drag-drop-touch.js","sources":["DragDropTouch.js","svelte-drag-drop-touch.ts"],"sourcesContent":["var DragDropTouch;\r\n(function (DragDropTouch_1) {\r\n    'use strict';\r\n    /**\r\n     * Object used to hold the data that is being dragged during drag and drop operations.\r\n     *\r\n     * It may hold one or more data items of different types. For more information about\r\n     * drag and drop operations and data transfer objects, see\r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\">HTML Drag and Drop API</a>.\r\n     *\r\n     * This object is created automatically by the @see:DragDropTouch singleton and is\r\n     * accessible through the @see:dataTransfer property of all drag events.\r\n     */\r\n    var DataTransfer = (function () {\r\n        function DataTransfer() {\r\n            this._dropEffect = 'move';\r\n            this._effectAllowed = 'all';\r\n            this._data = {};\r\n        }\r\n        Object.defineProperty(DataTransfer.prototype, \"dropEffect\", {\r\n            /**\r\n             * Gets or sets the type of drag-and-drop operation currently selected.\r\n             * The value must be 'none',  'copy',  'link', or 'move'.\r\n             */\r\n            get: function () {\r\n                return this._dropEffect;\r\n            },\r\n            set: function (value) {\r\n                this._dropEffect = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"effectAllowed\", {\r\n            /**\r\n             * Gets or sets the types of operations that are possible.\r\n             * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',\r\n             * 'linkMove', 'move', 'all' or 'uninitialized'.\r\n             */\r\n            get: function () {\r\n                return this._effectAllowed;\r\n            },\r\n            set: function (value) {\r\n                this._effectAllowed = value;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(DataTransfer.prototype, \"types\", {\r\n            /**\r\n             * Gets an array of strings giving the formats that were set in the @see:dragstart event.\r\n             */\r\n            get: function () {\r\n                return Object.keys(this._data);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Removes the data associated with a given type.\r\n         *\r\n         * The type argument is optional. If the type is empty or not specified, the data\r\n         * associated with all types is removed. If data for the specified type does not exist,\r\n         * or the data transfer contains no data, this method will have no effect.\r\n         *\r\n         * @param type Type of data to remove.\r\n         */\r\n        DataTransfer.prototype.clearData = function (type) {\r\n            if (type != null) {\r\n                delete this._data[type];\r\n            }\r\n            else {\r\n                this._data = null;\r\n            }\r\n        };\r\n        /**\r\n         * Retrieves the data for a given type, or an empty string if data for that type does\r\n         * not exist or the data transfer contains no data.\r\n         *\r\n         * @param type Type of data to retrieve.\r\n         */\r\n        DataTransfer.prototype.getData = function (type) {\r\n            return this._data[type] || '';\r\n        };\r\n        /**\r\n         * Set the data for a given type.\r\n         *\r\n         * For a list of recommended drag types, please see\r\n         * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.\r\n         *\r\n         * @param type Type of data to add.\r\n         * @param value Data to add.\r\n         */\r\n        DataTransfer.prototype.setData = function (type, value) {\r\n            this._data[type] = value;\r\n        };\r\n        /**\r\n         * Set the image to be used for dragging if a custom one is desired.\r\n         *\r\n         * @param img An image element to use as the drag feedback image.\r\n         * @param offsetX The horizontal offset within the image.\r\n         * @param offsetY The vertical offset within the image.\r\n         */\r\n        DataTransfer.prototype.setDragImage = function (img, offsetX, offsetY) {\r\n            var ddt = DragDropTouch._instance;\r\n            ddt._imgCustom = img;\r\n            ddt._imgOffset = { x: offsetX, y: offsetY };\r\n        };\r\n        return DataTransfer;\r\n    }());\r\n    DragDropTouch_1.DataTransfer = DataTransfer;\r\n    /**\r\n     * Defines a class that adds support for touch-based HTML5 drag/drop operations.\r\n     *\r\n     * The @see:DragDropTouch class listens to touch events and raises the\r\n     * appropriate HTML5 drag/drop events as if the events had been caused\r\n     * by mouse actions.\r\n     *\r\n     * The purpose of this class is to enable using existing, standard HTML5\r\n     * drag/drop code on mobile devices running IOS or Android.\r\n     *\r\n     * To use, include the DragDropTouch.js file on the page. The class will\r\n     * automatically start monitoring touch events and will raise the HTML5\r\n     * drag drop events (dragstart, dragenter, dragleave, drop, dragend) which\r\n     * should be handled by the application.\r\n     *\r\n     * For details and examples on HTML drag and drop, see\r\n     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_operations.\r\n     */\r\n    var DragDropTouch = (function () {\r\n        /**\r\n         * Initializes the single instance of the @see:DragDropTouch class.\r\n         */\r\n        function DragDropTouch() {\r\n            this._lastClick = 0;\r\n            // enforce singleton pattern\r\n            if (DragDropTouch._instance) {\r\n                throw 'DragDropTouch instance already created.';\r\n            }\r\n            // detect passive event support\r\n            // https://github.com/Modernizr/Modernizr/issues/1894\r\n            var supportsPassive = false;\r\n            document.addEventListener('test', function () { }, {\r\n                get passive() {\r\n                    supportsPassive = true;\r\n                    return true;\r\n                }\r\n            });\r\n            // listen to touch events\r\n            if (navigator.maxTouchPoints) {\r\n                var d = document, \r\n                    ts = this._touchstart.bind(this), \r\n                    tm = this._touchmove.bind(this), \r\n                    te = this._touchend.bind(this), \r\n                    opt = supportsPassive ? { passive: false, capture: false } : false;\r\n                d.addEventListener('touchstart', ts, opt);\r\n                d.addEventListener('touchmove', tm, opt);\r\n                d.addEventListener('touchend', te);\r\n                d.addEventListener('touchcancel', te);\r\n            }\r\n        }\r\n        /**\r\n         * Gets a reference to the @see:DragDropTouch singleton.\r\n         */\r\n        DragDropTouch.getInstance = function () {\r\n            return DragDropTouch._instance;\r\n        };\r\n        // ** event handlers\r\n        DragDropTouch.prototype._touchstart = function (e) {\r\n            var _this = this;\r\n            if (this._shouldHandle(e)) {\r\n                // raise double-click and prevent zooming\r\n                if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {\r\n                    if (this._dispatchEvent(e, 'dblclick', e.target)) {\r\n                        e.preventDefault();\r\n                        this._reset();\r\n                        return;\r\n                    }\r\n                }\r\n                // clear all variables\r\n                this._reset();\r\n                // get nearest draggable element\r\n                var src = this._closestDraggable(e.target);\r\n                if (src) {\r\n                    // give caller a chance to handle the hover/move events\r\n                    if (!this._dispatchEvent(e, 'mousemove', e.target) &&\r\n                        !this._dispatchEvent(e, 'mousedown', e.target)) {\r\n                        // get ready to start dragging\r\n                        this._dragSource = src;\r\n                        this._ptDown = this._getPoint(e);\r\n                        this._lastTouch = e;\r\n                        e.preventDefault();\r\n                        // show context menu if the user hasn't started dragging after a while\r\n                        setTimeout(function () {\r\n                            if (_this._dragSource == src && _this._img == null) {\r\n                                if (_this._dispatchEvent(e, 'contextmenu', src)) {\r\n                                    _this._reset();\r\n                                }\r\n                            }\r\n                        }, DragDropTouch._CTXMENU);\r\n                        if (DragDropTouch._ISPRESSHOLDMODE) {\r\n                            this._pressHoldInterval = setTimeout(function () {\r\n                                _this._isDragEnabled = true;\r\n                                _this._touchmove(e);\r\n                            }, DragDropTouch._PRESSHOLDAWAIT);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchmove = function (e) {\r\n            if (this._shouldCancelPressHoldMove(e)) {\r\n              this._reset();\r\n              return;\r\n            }\r\n            if (this._shouldHandleMove(e) || this._shouldHandlePressHoldMove(e)) {\r\n                // see if target wants to handle move\r\n                var target = this._getTarget(e);\r\n                if (this._dispatchEvent(e, 'mousemove', target)) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // start dragging\r\n                if (this._dragSource && !this._img && this._shouldStartDragging(e)) {\r\n                    this._dispatchEvent(e, 'dragstart', this._dragSource);\r\n                    this._createImage(e);\r\n                    this._dispatchEvent(e, 'dragenter', target);\r\n                }\r\n                // continue dragging\r\n                if (this._img) {\r\n                    this._lastTouch = e;\r\n                    e.preventDefault(); // prevent scrolling\n                    this._dispatchEvent(e, 'drag', this._dragSource);\r\n                    if (target != this._lastTarget) {\r\n                        this._dispatchEvent(this._lastTouch, 'dragleave', this._lastTarget);\r\n                        this._dispatchEvent(e, 'dragenter', target);\r\n                        this._lastTarget = target;\r\n                    }\r\n                    this._moveImage(e);\r\n                    this._isDropZone = this._dispatchEvent(e, 'dragover', target);\r\n                }\r\n            }\r\n        };\r\n        DragDropTouch.prototype._touchend = function (e) {\r\n            if (this._shouldHandle(e)) {\r\n                // see if target wants to handle up\r\n                if (this._dispatchEvent(this._lastTouch, 'mouseup', e.target)) {\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n                // user clicked the element but didn't drag, so clear the source and simulate a click\r\n                if (!this._img) {\r\n                    this._dragSource = null;\r\n                    this._dispatchEvent(this._lastTouch, 'click', e.target);\r\n                    this._lastClick = Date.now();\r\n                }\r\n                // finish dragging\r\n                this._destroyImage();\r\n                if (this._dragSource) {\r\n                    if (e.type.indexOf('cancel') < 0 && this._isDropZone) {\r\n                        this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget);\r\n                    }\r\n                    this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource);\r\n                    this._reset();\r\n                }\r\n            }\r\n        };\r\n        // ** utilities\r\n        // ignore events that have been handled or that involve more than one touch\r\n        DragDropTouch.prototype._shouldHandle = function (e) {\r\n            return e &&\r\n                !e.defaultPrevented &&\r\n                e.touches && e.touches.length < 2;\r\n        };\r\n\r\n        // use regular condition outside of press & hold mode\r\n        DragDropTouch.prototype._shouldHandleMove = function (e) {\r\n          return !DragDropTouch._ISPRESSHOLDMODE && this._shouldHandle(e);\r\n        };\r\n\r\n        // allow to handle moves that involve many touches for press & hold\r\n        DragDropTouch.prototype._shouldHandlePressHoldMove = function (e) {\r\n          return DragDropTouch._ISPRESSHOLDMODE &&\r\n              this._isDragEnabled && e && e.touches && e.touches.length;\r\n        };\r\n\r\n        // reset data if user drags without pressing & holding\r\n        DragDropTouch.prototype._shouldCancelPressHoldMove = function (e) {\r\n          return DragDropTouch._ISPRESSHOLDMODE && !this._isDragEnabled &&\r\n              this._getDelta(e) > DragDropTouch._PRESSHOLDMARGIN;\r\n        };\r\n\r\n        // start dragging when specified delta is detected\r\n        DragDropTouch.prototype._shouldStartDragging = function (e) {\r\n            var delta = this._getDelta(e);\r\n            return delta > DragDropTouch._THRESHOLD ||\r\n                (DragDropTouch._ISPRESSHOLDMODE && delta >= DragDropTouch._PRESSHOLDTHRESHOLD);\r\n        }\r\n\r\n        // clear all members\r\n        DragDropTouch.prototype._reset = function () {\r\n            this._destroyImage();\r\n            this._dragSource = null;\r\n            this._lastTouch = null;\r\n            this._lastTarget = null;\r\n            this._ptDown = null;\r\n            this._isDragEnabled = false;\r\n            this._isDropZone = false;\r\n            this._dataTransfer = new DataTransfer();\r\n            clearInterval(this._pressHoldInterval);\r\n        };\r\n        // get point for a touch event\r\n        DragDropTouch.prototype._getPoint = function (e, page) {\r\n            if (e && e.touches) {\r\n                e = e.touches[0];\r\n            }\r\n            return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };\r\n        };\r\n        // get distance between the current touch event and the first one\r\n        DragDropTouch.prototype._getDelta = function (e) {\r\n            if (DragDropTouch._ISPRESSHOLDMODE && !this._ptDown) { return 0; }\r\n            var p = this._getPoint(e);\r\n            return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);\r\n        };\r\n        // get the element at a given touch event\r\n        DragDropTouch.prototype._getTarget = function (e) {\r\n            var pt = this._getPoint(e), el = document.elementFromPoint(pt.x, pt.y);\r\n            while (el && getComputedStyle(el).pointerEvents == 'none') {\r\n                el = el.parentElement;\r\n            }\r\n            return el;\r\n        };\r\n        // create drag image from source element\r\n        DragDropTouch.prototype._createImage = function (e) {\r\n            // just in case...\r\n            if (this._img) {\r\n                this._destroyImage();\r\n            }\r\n            // create drag image from custom element or drag source\r\n            var src = this._imgCustom || this._dragSource;\r\n            this._img = src.cloneNode(true);\r\n            this._copyStyle(src, this._img);\r\n            this._img.style.top = this._img.style.left = '-9999px';\r\n            // if creating from drag source, apply offset and opacity\r\n            if (!this._imgCustom) {\r\n                var rc = src.getBoundingClientRect(), pt = this._getPoint(e);\r\n                this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };\r\n                this._img.style.opacity = DragDropTouch._OPACITY.toString();\r\n            }\r\n            // add image to document\r\n            this._moveImage(e);\r\n            document.body.appendChild(this._img);\r\n        };\r\n        // dispose of drag image element\r\n        DragDropTouch.prototype._destroyImage = function () {\r\n            if (this._img && this._img.parentElement) {\r\n                this._img.parentElement.removeChild(this._img);\r\n            }\r\n            this._img = null;\r\n            this._imgCustom = null;\r\n        };\r\n        // move the drag image element\r\n        DragDropTouch.prototype._moveImage = function (e) {\r\n            var _this = this;\r\n            requestAnimationFrame(function () {\r\n                if (_this._img) {\r\n                    var pt = _this._getPoint(e, true), s = _this._img.style;\r\n                    s.position = 'absolute';\r\n                    s.pointerEvents = 'none';\r\n                    s.zIndex = '999999';\r\n                    s.left = Math.round(pt.x - _this._imgOffset.x) + 'px';\r\n                    s.top = Math.round(pt.y - _this._imgOffset.y) + 'px';\r\n                }\r\n            });\r\n        };\r\n        // copy properties from an object to another\r\n        DragDropTouch.prototype._copyProps = function (dst, src, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n                var p = props[i];\r\n                dst[p] = src[p];\r\n            }\r\n        };\r\n        DragDropTouch.prototype._copyStyle = function (src, dst) {\r\n            // remove potentially troublesome attributes\r\n            DragDropTouch._rmvAtts.forEach(function (att) {\r\n                dst.removeAttribute(att);\r\n            });\r\n            // copy canvas content\r\n            if (src instanceof HTMLCanvasElement) {\r\n                var cSrc = src, cDst = dst;\r\n                cDst.width = cSrc.width;\r\n                cDst.height = cSrc.height;\r\n                cDst.getContext('2d').drawImage(cSrc, 0, 0);\r\n            }\r\n            // copy style (without transitions)\r\n            var cs = getComputedStyle(src);\r\n            for (var i = 0; i < cs.length; i++) {\r\n                var key = cs[i];\r\n                if (key.indexOf('transition') < 0) {\r\n                    dst.style[key] = cs[key];\r\n                }\r\n            }\r\n            dst.style.pointerEvents = 'none';\r\n            // and repeat for all children\r\n            for (var i = 0; i < src.children.length; i++) {\r\n                this._copyStyle(src.children[i], dst.children[i]);\r\n            }\r\n        };\r\n        DragDropTouch.prototype._dispatchEvent = function (e, type, target) {\r\n            if (e && target) {\r\n                var evt = document.createEvent('Event'), t = e.touches ? e.touches[0] : e;\r\n                evt.initEvent(type, true, true);\r\n                evt.button = 0;\r\n                evt.which = evt.buttons = 1;\r\n                this._copyProps(evt, e, DragDropTouch._kbdProps);\r\n                this._copyProps(evt, t, DragDropTouch._ptProps);\r\n                evt.dataTransfer = this._dataTransfer;\r\n                target.dispatchEvent(evt);\r\n                return evt.defaultPrevented;\r\n            }\r\n            return false;\r\n        };\r\n        // gets an element's closest draggable ancestor\r\n        DragDropTouch.prototype._closestDraggable = function (e) {\r\n            for (; e; e = e.parentElement) {\r\n                if (e.hasAttribute('draggable') && e.draggable) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        return DragDropTouch;\r\n    }());\r\n    /*private*/ DragDropTouch._instance = new DragDropTouch(); // singleton\r\n    // constants\r\n    DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts\r\n    DragDropTouch._OPACITY = 0.5; // drag image opacity\r\n    DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click\r\n    DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event\r\n    DragDropTouch._ISPRESSHOLDMODE = false; // decides of press & hold mode presence\r\n    DragDropTouch._PRESSHOLDAWAIT = 400; // ms to wait before press & hold is detected\r\n    DragDropTouch._PRESSHOLDMARGIN = 25; // pixels that finger might shiver while pressing\r\n    DragDropTouch._PRESSHOLDTHRESHOLD = 0; // pixels to move before drag starts\r\n    // copy styles/attributes from drag source to drag image element\r\n    DragDropTouch._rmvAtts = 'id,class,style,draggable'.split(',');\r\n    // synthesize and dispatch an event\r\n    // returns true if the event has been handled (e.preventDefault == true)\r\n    DragDropTouch._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');\r\n    DragDropTouch._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY,offsetX,offsetY'.split(',');\r\n    DragDropTouch_1.DragDropTouch = DragDropTouch;\r\n})(DragDropTouch || (DragDropTouch = {}));\r\n\nexport default DragDropTouch\n","  import DragDropTouch from './DragDropTouch.js'\n\n  export default DragDropTouch.DragDropTouch"],"names":["DragDropTouch","DragDropTouch_1","DataTransfer","this","_dropEffect","_effectAllowed","_data","Object","defineProperty","prototype","get","set","value","enumerable","configurable","keys","clearData","type","getData","setData","setDragImage","img","offsetX","offsetY","ddt","_instance","_imgCustom","_imgOffset","x","y","_lastClick","supportsPassive","document","addEventListener","passive","navigator","maxTouchPoints","d","ts","_touchstart","bind","tm","_touchmove","te","_touchend","opt","capture","getInstance","e","_this","_shouldHandle","Date","now","_DBLCLICK","_dispatchEvent","target","preventDefault","_reset","src","_closestDraggable","_dragSource","_ptDown","_getPoint","_lastTouch","setTimeout","_img","_CTXMENU","_ISPRESSHOLDMODE","_pressHoldInterval","_isDragEnabled","_PRESSHOLDAWAIT","_shouldCancelPressHoldMove","_shouldHandleMove","_shouldHandlePressHoldMove","_getTarget","_shouldStartDragging","_createImage","_lastTarget","_moveImage","_isDropZone","_destroyImage","indexOf","defaultPrevented","touches","length","_getDelta","_PRESSHOLDMARGIN","delta","_THRESHOLD","_PRESSHOLDTHRESHOLD","_dataTransfer","clearInterval","page","pageX","clientX","pageY","clientY","p","Math","abs","pt","el","elementFromPoint","getComputedStyle","pointerEvents","parentElement","cloneNode","_copyStyle","style","top","left","rc","getBoundingClientRect","opacity","_OPACITY","toString","body","appendChild","removeChild","requestAnimationFrame","s","position","zIndex","round","_copyProps","dst","props","i","_rmvAtts","forEach","att","removeAttribute","HTMLCanvasElement","cSrc","cDst","width","height","getContext","drawImage","cs","key","children","evt","createEvent","t","initEvent","button","which","buttons","_kbdProps","_ptProps","dataTransfer","dispatchEvent","hasAttribute","draggable","split"],"mappings":"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"}